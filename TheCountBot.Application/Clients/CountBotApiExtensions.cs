// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TheCountBot.Application.Clients
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CountBotApi.
    /// </summary>
    public static partial class CountBotApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string Get(this ICountBotApi operations)
            {
                return operations.GetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetAsync(this ICountBotApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestBody'>
            /// </param>
            public static NewMessageResponse NewCountingMessage(this ICountBotApi operations, NewMessageRequest requestBody = default(NewMessageRequest))
            {
                return operations.NewCountingMessageAsync(requestBody).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NewMessageResponse> NewCountingMessageAsync(this ICountBotApi operations, NewMessageRequest requestBody = default(NewMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NewCountingMessageWithHttpMessagesAsync(requestBody, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static AllUserStatisticsResponse NewAllStatsCommandAsync(this ICountBotApi operations)
            {
                return operations.NewAllStatsCommandAsyncAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AllUserStatisticsResponse> NewAllStatsCommandAsyncAsync(this ICountBotApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NewAllStatsCommandAsyncWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// </param>
            public static SingleUserStatisticsResponse NewUserStatsCommandAsync(this ICountBotApi operations, string username)
            {
                return operations.NewUserStatsCommandAsyncAsync(username).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SingleUserStatisticsResponse> NewUserStatsCommandAsyncAsync(this ICountBotApi operations, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NewUserStatsCommandAsyncWithHttpMessagesAsync(username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
